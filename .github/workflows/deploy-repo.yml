name: deploy-repo

run-name: 'deploy-repo: Issue #${{ github.event.issue.number }} by @${{ github.actor }}'

on:
  issues:
    types: [opened]

jobs:
  deploy-repo:
    name: Deploy Repo
    runs-on: ubuntu-latest
    if: github.event_name == 'issues' &&
      (github.event.action == 'opened') &&
      contains(github.event.issue.labels.*.name, 'deploy-repo')
    permissions:
      contents: read
      issues: write

    steps:
      - uses: actions/checkout@v5
      - name: Write GitHub context to log
        env:
          GITHUB_CONTEXT: ${{ toJSON(github) }}
        run: echo "$GITHUB_CONTEXT"

      - uses: actions/create-github-app-token@v2
        id: app-token
        with:
          app-id: ${{ vars.APP_ID }}
          private-key: ${{ secrets.PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}

      - name: Parse Issue
        id: parser
        uses: issue-ops/parser@76d5aa095754de1493cbe41934484c4287e16350 # v4.2.0
        with:
          body: ${{ github.event.issue.body }}

      - name: Output Issue JSON
        id: output-issue
        run: echo "${{ steps.parser.outputs.json }}"

      - name: Set env vars
        run: |
          echo "CONFIRM_DEPLOYMENT=${{ fromJson(steps.parser.outputs.json).confirm_deployment }}" >> $GITHUB_ENV

      - name: Rename issue
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          script: |
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              title: `Deploy Repo: ${process.env.CONFIRM_DEPLOYMENT}`
            })

      - name: Get production repo current commit
        if: ${{ env.CONFIRM_DEPLOYMENT == 'yes' }}
        id: get-prod-commit
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          script: |
            const repo = await github.rest.repos.get({
              owner: 'joshjohanning-org',
              repo: 'issueops-samples'
            });
            
            const commit = await github.rest.repos.getCommit({
              owner: 'joshjohanning-org',
              repo: 'issueops-samples',
              ref: repo.data.default_branch
            });
            
            core.setOutput('commit_sha', commit.data.sha);
            core.setOutput('commit_message', commit.data.commit.message);
            core.setOutput('commit_url', commit.data.html_url);
            return {
              sha: commit.data.sha,
              message: commit.data.commit.message,
              url: commit.data.html_url
            };

      - name: Deploy to production
        if: ${{ env.CONFIRM_DEPLOYMENT == 'yes' }}
        run: |
          # Configure git
          git config --global user.name 'josh-issueops-bot[bot]'
          git config --global user.email '149130343+josh-issueops-bot[bot]@users.noreply.github.com'
          
          # Clone the production repository as a mirror
          git clone --mirror https://x-access-token:${{ steps.app-token.outputs.token }}@github.com/joshjohanning-org/issueops-samples.git prod-repo.git
          
          # Add this repository as a remote and push
          cd prod-repo.git
          git remote add dev-repo https://x-access-token:${{ steps.app-token.outputs.token }}@github.com/${{ github.repository }}.git
          git fetch dev-repo
          git push --mirror origin

      - name: Post deployment success message
        if: ${{ env.CONFIRM_DEPLOYMENT == 'yes' && success() }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          script: |
            const prodCommitSha = `${{ steps.get-prod-commit.outputs.commit_sha }}`;
            const prodCommitMessage = `${{ steps.get-prod-commit.outputs.commit_message }}`;
            const prodCommitUrl = `${{ steps.get-prod-commit.outputs.commit_url }}`;
            
            let commentBody = `üöÄ Successfully deployed to production repository!

            **Previous production commit (for rollback reference):**
            - SHA: \`${prodCommitSha}\`
            - Message: ${prodCommitMessage}
            - [View commit](${prodCommitUrl})

            **Production repository:** [joshjohanning-org/issueops-samples](https://github.com/joshjohanning-org/issueops-samples)
            `;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: commentBody
            });

      - name: Post deployment skipped message
        if: ${{ env.CONFIRM_DEPLOYMENT != 'yes' }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          script: |
            let commentBody = `‚è≠Ô∏è Deployment skipped because confirmation was not set to "yes".
            
            **Parsed confirmation value:** \`${{ env.CONFIRM_DEPLOYMENT }}\`
            
            To deploy to production, please ensure the "Confirm Deployment" field is set to exactly "yes" (without quotes).`;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: commentBody
            });
            
      - name: Post failure message
        if: ${{ failure() }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          script: |
            let commentBody;
            if (`${{ env.CONFIRM_DEPLOYMENT }}` === 'yes') {
              commentBody = `üò¢ Deployment to production failed. Please review the [action logs](${{ github.SERVER_URL }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for more information.`;
            } else {
              commentBody = `üò¢ The issue body could not be parsed, @${{ github.actor }}. Please open a new issue using the issue template and ensure your formatting and line spacing remains untouched.\n\nReview the [action logs](${{ github.SERVER_URL }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for more information.`;
            }
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: commentBody
            });
